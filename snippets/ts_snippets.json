{
    "Pixel Pizza command": {
		"scope": "typescript",
		"prefix": [
			"command", 
			"cmd"
		],
		"body": [
			"import {Command, CustomClient} from \"../../api\"",
			"",
			"module.exports = class ${1:CommandName}Command extends Command {",
			"\tpublic constructor(client: CustomClient) {",
			"\t\tsuper(client, {",
			"\t\t\tname: ${2:commandname},",
			"\t\t\tdescription: ${3:description}",
			"\t\t\tdefaultPermission: ${4|true,false|}",
			"\t\t}$5);",
			"\t}",
			"",
			"\tpublic ${6:async }run($7) {",
			"\t\t",
			"\t}",
			"};"
		],
		"description": "Make a pixel pizza command"
	},
	"Pixel Pizza event": {
		"scope": "typescript",
		"prefix": "event",
		"body": [
			"import {ClientEvent, CustomClient} from \"../api\";",
			"",
			"module.exports = class ${1:EventName}Event extends ClientEvent {",
			"\tpublic constructor(client: CustomClient) {",
			"\t\tsuper(client, \"${2:eventname}\");",
			"\t}",
			"",
			"\tpublic ${3:async }run($4) {",
			"\t\t",
			"\t}",
			"};"
		],
		"description": "Make a pixel pizza event"
	},
	"Pixel Pizza model column": {
		"scope": "typescript",
		"prefix": "column",
		"body": [
			"interface ${1:ModelName}Column {",
			"",
			"}"
		],
		"description": "Make a pixel pizza model column interface"
	},
	"Pixel Pizza model": {
		"scope": "typescript",
		"prefix": "model",
		"body": [
			"import { CreateOptions, DataTypes, FindOptions, FindOrCreateOptions, Model, Sequelize, UpdateOptions } from \"sequelize\";",
			"",
			"interface ${1:ModelName}Column {}",
			"",
			"class $1Model extends Model {",
			"\tpublic static initModel(sequelize: Sequelize) {",
			"\t\tthis.init({}, {",
			"\t\t\tmodelName: \"$1\",",
			"\t\t\tsequelize",
			"\t\t});",
			"\t}",
			"",
			"\tpublic static make(values: $1Column, options?: CreateOptions<$1Column>) {",
			"\t\treturn this.create(values, options);",
			"\t}",
			"",
			"\tpublic static getOrMake(options: FindOrCreateOptions<$1Column>) {",
			"\t\treturn this.findOrCreate(options);",
			"\t}",
			"",
			"\tpublic static getOne(options?: FindOptions<$1Column>) {",
			"\t\treturn this.findOne(options);",
			"\t}",
			"",
			"\tpublic static getAll(options?: FindOptions<$1Column>) {",
			"\t\treturn this.findAll(options);",
			"\t}",
			"",
			"\tpublic static change(values: Partial<$1Column>, options: UpdateOptions<$1Column>) {",
			"\t\treturn this.update(values, options);",
			"\t}",
			"}"
		]
	}
}